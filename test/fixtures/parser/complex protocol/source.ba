/**
 * Custom types and structures
 */

alias uint32 playerId
alias uint32 itemId

enum bool {
  FALSE = 0x00
  TRUE  = 0x01
}

struct list<lengthType, itemType> {
  lengthType       length
  itemType[length] elements
}

alias list<uint16, uint8> string
alias list<uint8, uint8> shortString

// the upper left corner of the map fragment is (x, y) and it's size is n x m
// textures are passed from the left to the right, from the top to the bottom
struct mapFragment {
  int16        x
  int16        y
  uint16       n
  uint16       m
  uint16[m][n] textures
}

struct item {
  itemId id
  uint16 type
  uint16 order
}

struct itemContainer {
  itemId            capacity
  list<uint8, item> items
}

struct player {
  playerId    id
  shortString nick
  float32     x
  float32     y

  // 0 is top, π/2 is right, π is bottom, 3/2π is left; value should be clipped to [0, 2π]
  float32     angle

  // considered valid only if 0 <= hue <= 359
  uint16      hue
}

struct currentPlayer {
  player        player
  itemContainer equipment
}

/**
 * Messages
 */

@read(server)
@write(client)
{
  // Reliable client messages, from 0x0000
  {
    message register = 0x0001 {
      shortString nick
      shortString password
    }

    message nickAvailable = 0x0002 {
      shortString nick
    }

    message login = 0x0003 {
      shortString nick
      shortString password
    }

    message readyState = 0x0004 {
      bool isReady
    }

    message sendGlobalMessage = 0x0100 {
      string text
    }

    message sendPrivateMessage = 0x0101 {
      playerId recipient
      string   text
    }
  }

  // Unreliable client messages, from 0x1000
  {
    message playerInput = 0x1000 {
      float32 angle
      float32 scalar // clipped to [0, 1]
    }

    message useItemOnField = 0x1001 {
      itemId id
      int16  x
      int16  y
    }
  }
}

@read(client)
@write(server)
{
  // Reliable server messages, from 0x2000
  {
    enum errorCode {
      UNKNOWN_MESSAGE_TYPE = 0x0000
      INVALID_MESSAGE      = 0x0001
      SERVER_ERROR         = 0x0002
    }
    message error = 0x2000 {
      errorCode code
    }

    enum registerResponseCode {
      OK               = 0x00
      NICK_UNAVAILABLE = 0x01
      INVALID_PASSWORD = 0x02
    }
    message registerResponse = 0x2001 {
      registerResponseCode code
    }

    message nickAvailableResponse = 0x2002 {
      shortString nick
      bool        isAvailable
    }

    enum loginResponseCode {
      OK                  = 0x00
      INVALID_CREDENTIALS = 0x01
      ALREADY_LOGGED_IN   = 0x02
    }
    message loginResponse = 0x2003 {
      loginResponseCode code
    }

    message messageReceived = 0x2100 {
      bool     isPrivate
      playerId sender
      string   text
    }
  }

  // Unreliable server messages, from 0x3000
  {
    message worldState = 0x3000 {
      mapFragment          mapFragment
      currentPlayer        currentPlayer
      list<uint8, player>  players
    }

    message timestamp = 0x3001 {
      float64 time
    }
  }

  // Unreliable server debug messages, from 0x7000
  {
    struct debugMarker {
      float32 x
      float32 y
      uint16  hue
    }

    message debugMarkers = 0x7000 {
      list<uint8, debugMarker> markers
    }

    message debugVarDumpJSON = 0x7001 {
      string vars
    }
  }
}
